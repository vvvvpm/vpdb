<vpack>
	<meta>
		<name>MY_PACK_NAME</name>
        <license>http://www.MY-LICENSE.com</license>
		<author>MY_NAME</author>
	</meta>
	<install>
		using System;
		using System.Text;
		using System.IO;
		using System.Linq;
		using System.Net;
		using Newtonsoft.Json.Linq;

		try
		{
			// params:
			
			var ghuser = "MY_GITHUB_ACCOUNT";
			var ghrepo = "MY_REPO_NAME";
			var baseurl = "https://api.github.com";
            var filename = string.Format("MY_PACK-{0}.zip", VVVV.Architecture);
			
			var initreguest = string.Format(
				"/repos/{0}/{1}/releases?client_id={2}&amp;client_secret={3}",
				ghuser,
				ghrepo,
				Encoding.ASCII.GetString(Convert.FromBase64String("MY_GITHUB_CLIENT_ID_BASE64")),
				Encoding.ASCII.GetString(Convert.FromBase64String("MY_GITHUB_CLIENT_SECRET_BASE64"))
			);
			// Create API keys on your github account specifically for this purpose with readonly minimal permissions
			// I know it's generally a horrible idea to post your API keys onto a public repo but otherwise this thing wouldn't work

			// end params;

			var client = new WebClient();
			client.Headers.Add("user-agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; .NET CLR 1.0.3705;)");
			Console.WriteLine("Fetching releases from github");

			var stream = client.OpenRead(baseurl + initreguest);
			var reader = new StreamReader(stream).ReadToEnd();
			var jsondata = JArray.Parse(reader);
			var jsonres = jsondata.Children().ToArray()[0];
			var asset = jsonres["assets"].Where(a => a["name"].ToString() == filename).ToArray()[0];

			Console.WriteLine("Downloading {0} from {1}", filename, jsonres["tag_name"]);

			Download(
				asset["browser_download_url"].ToString(),
				Path.Combine(VPM.TempDir, filename)
			);
			Extract(Path.Combine(VPM.TempDir, filename), Pack.TempDir);
			CopyDir(
				Pack.TempDir,
				Path.Combine(VVVV.Dir, "packs")
			);
		}
		catch (Exception e)
		{
			ThrowException(e);
		}
	</install>
</vpack>
