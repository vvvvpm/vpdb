<vpack>
	<meta>
		<name>Notui</name>
		<license>https://hackmd.io/s/BkFfnBDP7</license>
		<author>microdee</author>
	</meta>
	<install>
		using System;
		using System.Text;
		using System.IO;
		using System.Linq;
		using System.Net;
        using System.Xml;
		using Newtonsoft.Json.Linq;

		try
		{
			// params:
			var ghuser = "microdee";
			var ghrepo = "Notui";
			var baseurl = "https://api.github.com";
			var filename = "Notui.zip";


			Console.WriteLine("Patching vvvv.exe.config");

			var confpath = Path.Combine(VVVV.Dir, "vvvv.exe.config");
			if(!File.Exists(confpath))
				throw new Exception("vvvv.exe.config does not exists. Please install vvvv first");
			var xmltext = File.ReadAllText(confpath);
	        var doc = new XmlDocument();
	        doc.LoadXml(xmltext);
	        var probing = doc["configuration"]?["runtime"]?["assemblyBinding"]?["probing"];
	        if(probing == null)
	        {
	        	var asmbinding = doc["configuration"]?["runtime"]?["assemblyBinding"];
	        	var probeel = doc.CreateElement("probing");
	        	var privpathsattr = doc.CreateAttribute("privatePath");
	        	privpathsattr.Value = @"lib\core;packs\md.core";
	        	probeel.Attributes.Append(privpathsattr);
	        	asmbinding.AppendChild(probeel);
	        }
	        else
	        {
	        	var privpaths = probing.Attributes["privatePath"];
	        	if(!privpaths.Value.Contains(@"packs\md.core"))
	        	{
	        		privpaths.Value = privpaths.Value + @";packs\md.core";
	        	}
	        }
	        doc.Save(confpath);


			Console.WriteLine("Fetching releases from github");
			
			var initreguest = string.Format(
				"/repos/{0}/{1}/releases?client_id={2}&amp;client_secret={3}",
				ghuser,
				ghrepo,
				Encoding.ASCII.GetString(Convert.FromBase64String("ZDM4YjY2ZDc3ZGQ4MGVlZDEyNjg=")),
				Encoding.ASCII.GetString(Convert.FromBase64String("MWFjM2JjYTRmNTY4ZmQ1MmI5MmUyNTAyOWQxZGI5MDRlZDZiMDdkYw=="))
			);
			// Console.WriteLine(baseurl + initreguest);

			var client = new WebClient();
			client.Headers.Add("user-agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; .NET CLR 1.0.3705;)");

			var stream = client.OpenRead(baseurl + initreguest);
			var reader = new StreamReader(stream).ReadToEnd();
			var jsondata = JArray.Parse(reader);
			var jsonres = jsondata.Children().ToArray()[0];
			var asset = jsonres["assets"].Where(a => a["name"].ToString() == filename).ToArray()[0];


			Console.WriteLine("Downloading {0} from {1}", filename, jsonres["tag_name"]);

			Download(
				asset["browser_download_url"].ToString(),
				Path.Combine(VPM.TempDir, filename)
			);
			Extract(Path.Combine(VPM.TempDir, filename), Pack.TempDir);


			Console.WriteLine("Deleting unnecessary DLL's");

			foreach(var file in Directory.GetFiles(Pack.TempDir))
			{
				var fname = Path.GetFileNameWithoutExtension(file);
				if(fname.Contains("SharpDX")) File.Delete(file);
				if(fname.Contains("SlimDX")) File.Delete(file);
				if(fname.Contains("VVVV.Utils")) File.Delete(file);
			}

			CopyDir(
				Pack.TempDir,
				Path.Combine(VVVV.Dir, "packs", "md.core")
			);
		}
		catch (Exception e)
		{
			ThrowException(e);
		}
	</install>
</vpack>
